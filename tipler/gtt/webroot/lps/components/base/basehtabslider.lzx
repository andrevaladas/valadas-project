<library>
    <include href="base/baselist.lzx" />
    <include href="utils/layouts/simplelayout.lzx"/>


    <!--- This class is a non-visual container that animates and coordinates the
          sliding of basehtabelements. -->
    <class name="basehtabslider" extends="baselist"
           styleable="false"
           layout="class: simplelayout; axis: x" 
           oninit="_setSpacing(spacing)"> <!-- so layout gets spacing oninit -->

        <!--- The duration of the tabs openning and closing. Default is 300. -->
        <attribute name="slideduration"   value="300" />

        <!--- The spacing of the tabs. Default is 0. -->
        <attribute name="spacing" value="0" setter="_setSpacing(spacing)"/>

        <!--- resetHeight() should only get called from setSpacing not during
              init.
              @keywords private -->
        <attribute name="_spacinginitdone" value="false" />

        <!--- The default height of every tab when closed. Default is
              22. -->
        <attribute name="mintabwidth"    value="22" />

        <!--- @keywords private -->
        <attribute name="opennedtab"      value="null" />
        
        <!--- The top inset for content appearing within a htabelement. Default
              is 8. -->
        <attribute name="inset_top" value="8"/>
        
        <!--- The left inset for content appearing within a htabelement. Default
              is 8. -->
        <attribute name="inset_left" value="8"/>
        
        <!--- The bottom inset for content appearing within a htabelement.
              Default is 8. -->
        <attribute name="inset_bottom" value="8"/>
        
        <!--- The right inset for content appearing within a htabelement. Default
              is 8. -->
        <attribute name="inset_right" value="8"/>

        <!--- @keywords private -->
        <attribute name="totalminwidth"  value="0" />

        <!--- @keywords private -->
        <attribute name="availablewidth" value="0" />

        <!--- Deprecated. See todo 3570.
             @keywords private -->
        <attribute name="hilite" value="false" />

        <!--- @keywords private -->
        <attribute name="_defaultview" value="null" />

        <!--- @keywords private -->
        <method name="init" >
            // all subviews should now be created so call calcwidth
            // so the tebelements can reference it
            this.calcAvailableWidth();

            // do inherited and send oninit events
            super.init();
        </method>

        <!--- Recalculate the available width and update the opened tab. 
              @keywords private-->
        <method name="resetWidth" >
            this.calcAvailableWidth();
            var opentab = this.getSelection();
            if ( opentab ) {
                if (opentab instanceof Array) {
                    opentab = opentab[0];
                }
                opentab.setAttribute("width",
                    opentab['minwidth'] + this.availablewidth);
            }
        </method>

        <!--- @keywords private -->
        <method name="_setSpacing" args="sp">
            // TODO: a max spacing size
            this.spacing = sp;
            if (this._initcomplete) {
                var cv = null;
                if ( this.defaultplacement != null ) {
                    cv = this.searchSubviews( "name", this.defaultplacement );
                } 
                if (cv == null) cv = this;
                cv.layouts[0].setAttribute('spacing', sp);
                if (this._spacinginitdone) {
                    this.resetWidth();
                } else {
                   this._spacinginitdone = true;
               }
            } 
        </method>


        <!--- Set the width of the basetabslider.
              @param Number w: the width. -->
        <method name="setWidth" args="w" >
            if ( w != width ) {
                super.setWidth(w);
                this.resetWidth();
            }
        </method>


        <!--- Select a htabelement.
              @param LzView item: the htabelement to select. -->
        <method name="select" args="item" >
        <![CDATA[
            // Override the select method of baselist so a htabelement that is
            // already open does not get a close call
            if ( this._initcomplete ) {
                var sel = this.getSelection();
                if ( sel ) {
                    if (!toggleselected) {
                        if (sel instanceof Array && sel[0] == item) return;
                        if (sel == item) return;
                    }
                }
                this._selector.select( item );
                var v =  this.getValue();
                this.setAttribute('value', v );

                //this is duplicated from baselist, but the superclass method
                //isn't called
                if ( this._hiliteview && this._hiliteview.enabled) {
                    this._hiliteview['setHilite'](false);
                }

                this.setAttribute( 'doesenter', false );

            } else {
                this._initialselection = item;
            }
        ]]>
        </method>

        <!--- Called when an item is added to the tabslider.
              @param LzView v: view to be added. -->
        <handler name="onaddsubview" method="doAddSubview"/>
        <method name="doAddSubview" args="v" >
            if ( this.itemclassname == "" ){
                this.itemclassname = v.constructor.classname;
            }
            if ( typeof(v.minwidth) == "undefined" ) {
                // no minwidth was defined so assign the parent
                // value before calling calcAvailableWidth
                if ( v instanceof basehtabelement ) v.setAttribute('minwidth', this.mintabwidth);
            }
            // v.setWidth(v.minwidth);

            this.calcAvailableWidth();
            var opentab = this.getSelection();
            if ( opentab ) {
                if (opentab instanceof Array) {
                    opentab = opentab[0];
                }
                opentab.setAttribute("width",
                    opentab['minwidth'] + this.availablewidth);
            }
        </method>

        <!--- Deprecated: use this.select(atabview) instead.
              @param basehtabelement htabelement: htabelement to open. 
              @param boolean withAnimation: unused. -->
        <method name="openTab" args="htabelement,withAnimation" > <![CDATA[
            var didopen = false;
            var ot = this._selector.getSelection()[0];
            if ( ot != htabelement ){
                this._selector.select(htabelement);
                this.opennedtab = htabelement;
                didopen = true;
            }
            return didopen;
        ]]> </method>

        <!--- Open next htabelement. Nothing will be opened if the last
              basehtabelement is encountered.
              @return boolean: true if it was able to open the next
              htabelement. -->
        <method name="openNext" > <![CDATA[
            var ot = this._selector.getSelection()[0];
            var index = -1;
            for ( var i = 0; i < this._defaultview.subviews.length; i++ ) {
                if ( ot == this._defaultview.subviews[i] ) index = i;
            }
            index += 1;
            if ( index < this._defaultview.subviews.length ) 
                 return openTab(this._defaultview.subviews[index]);
            else
                return false;
        ]]> </method>

        <!--- Add the new item (instantiated using itemclassname) and a new
              htabelement.
              @param String txt: The name of the htabelement. -->
        <method name="addItem" args="txt" > <![CDATA[
            var v = new global[this.itemclassname](this,{text:txt});
            this.onwidth.sendEvent(); // force an update
        ]]> </method>

        <!--- Calculate the width available to place items in
              basetabslider. -->
        <method name="calcAvailableWidth" > <![CDATA[
           var cv = null;
           if ( this.defaultplacement != null ) {
               cv = this.searchSubviews( "name", this.defaultplacement );
           }
           if ( cv == null) cv = this;
           this._defaultview = cv;
           if ( cv['subviews'] ) {
                if ( !cv['layouts'] ) return;
                var tmw = 0;
                for( var m=0; m < cv.subviews.length; m++ ) {
                    var sv = cv.subviews[m]
                    if ( sv.visible && sv instanceof basehtabelement ) {
                        tmw += sv['minwidth'] + spacing;
                    }
                }
                // don't need spacing on last element
                tmw -= spacing;

                // set the corresponding width of the attributes
                this.setAttribute('availablewidth',
                  Math.max(0,cv.getAttribute("width") - tmw));
                this.setAttribute('totalminwidth',tmw);
            }
        ]]> </method>
   </class> <!-- END: basetabslider -->
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2007 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
